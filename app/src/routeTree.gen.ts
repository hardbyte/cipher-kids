/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as CiphersVigenereImport } from './routes/ciphers/vigenere'
import { Route as CiphersKeywordImport } from './routes/ciphers/keyword'
import { Route as CiphersCaesarImport } from './routes/ciphers/caesar'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CiphersVigenereRoute = CiphersVigenereImport.update({
  id: '/ciphers/vigenere',
  path: '/ciphers/vigenere',
  getParentRoute: () => rootRoute,
} as any)

const CiphersKeywordRoute = CiphersKeywordImport.update({
  id: '/ciphers/keyword',
  path: '/ciphers/keyword',
  getParentRoute: () => rootRoute,
} as any)

const CiphersCaesarRoute = CiphersCaesarImport.update({
  id: '/ciphers/caesar',
  path: '/ciphers/caesar',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/ciphers/caesar': {
      id: '/ciphers/caesar'
      path: '/ciphers/caesar'
      fullPath: '/ciphers/caesar'
      preLoaderRoute: typeof CiphersCaesarImport
      parentRoute: typeof rootRoute
    }
    '/ciphers/keyword': {
      id: '/ciphers/keyword'
      path: '/ciphers/keyword'
      fullPath: '/ciphers/keyword'
      preLoaderRoute: typeof CiphersKeywordImport
      parentRoute: typeof rootRoute
    }
    '/ciphers/vigenere': {
      id: '/ciphers/vigenere'
      path: '/ciphers/vigenere'
      fullPath: '/ciphers/vigenere'
      preLoaderRoute: typeof CiphersVigenereImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/ciphers/caesar' | '/ciphers/keyword' | '/ciphers/vigenere'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/ciphers/caesar' | '/ciphers/keyword' | '/ciphers/vigenere'
  id:
    | '__root__'
    | '/'
    | '/ciphers/caesar'
    | '/ciphers/keyword'
    | '/ciphers/vigenere'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CiphersCaesarRoute: typeof CiphersCaesarRoute
  CiphersKeywordRoute: typeof CiphersKeywordRoute
  CiphersVigenereRoute: typeof CiphersVigenereRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CiphersCaesarRoute: CiphersCaesarRoute,
  CiphersKeywordRoute: CiphersKeywordRoute,
  CiphersVigenereRoute: CiphersVigenereRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ciphers/caesar",
        "/ciphers/keyword",
        "/ciphers/vigenere"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/ciphers/caesar": {
      "filePath": "ciphers/caesar.tsx"
    },
    "/ciphers/keyword": {
      "filePath": "ciphers/keyword.tsx"
    },
    "/ciphers/vigenere": {
      "filePath": "ciphers/vigenere.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
