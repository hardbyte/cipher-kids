/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ConfigRouteImport } from './routes/config'
import { Route as AchievementsRouteImport } from './routes/achievements'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CiphersVigenereRouteImport } from './routes/ciphers/vigenere'
import { Route as CiphersRailfenceRouteImport } from './routes/ciphers/railfence'
import { Route as CiphersPigpenRouteImport } from './routes/ciphers/pigpen'
import { Route as CiphersMorseRouteImport } from './routes/ciphers/morse'
import { Route as CiphersKeywordRouteImport } from './routes/ciphers/keyword'
import { Route as CiphersCaesarRouteImport } from './routes/ciphers/caesar'
import { Route as CiphersAtbashRouteImport } from './routes/ciphers/atbash'

const ConfigRoute = ConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => rootRouteImport,
} as any)
const AchievementsRoute = AchievementsRouteImport.update({
  id: '/achievements',
  path: '/achievements',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersVigenereRoute = CiphersVigenereRouteImport.update({
  id: '/ciphers/vigenere',
  path: '/ciphers/vigenere',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersRailfenceRoute = CiphersRailfenceRouteImport.update({
  id: '/ciphers/railfence',
  path: '/ciphers/railfence',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersPigpenRoute = CiphersPigpenRouteImport.update({
  id: '/ciphers/pigpen',
  path: '/ciphers/pigpen',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersMorseRoute = CiphersMorseRouteImport.update({
  id: '/ciphers/morse',
  path: '/ciphers/morse',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersKeywordRoute = CiphersKeywordRouteImport.update({
  id: '/ciphers/keyword',
  path: '/ciphers/keyword',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersCaesarRoute = CiphersCaesarRouteImport.update({
  id: '/ciphers/caesar',
  path: '/ciphers/caesar',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersAtbashRoute = CiphersAtbashRouteImport.update({
  id: '/ciphers/atbash',
  path: '/ciphers/atbash',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/achievements': typeof AchievementsRoute
  '/config': typeof ConfigRoute
  '/ciphers/atbash': typeof CiphersAtbashRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/morse': typeof CiphersMorseRoute
  '/ciphers/pigpen': typeof CiphersPigpenRoute
  '/ciphers/railfence': typeof CiphersRailfenceRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/achievements': typeof AchievementsRoute
  '/config': typeof ConfigRoute
  '/ciphers/atbash': typeof CiphersAtbashRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/morse': typeof CiphersMorseRoute
  '/ciphers/pigpen': typeof CiphersPigpenRoute
  '/ciphers/railfence': typeof CiphersRailfenceRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/achievements': typeof AchievementsRoute
  '/config': typeof ConfigRoute
  '/ciphers/atbash': typeof CiphersAtbashRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/morse': typeof CiphersMorseRoute
  '/ciphers/pigpen': typeof CiphersPigpenRoute
  '/ciphers/railfence': typeof CiphersRailfenceRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/achievements'
    | '/config'
    | '/ciphers/atbash'
    | '/ciphers/caesar'
    | '/ciphers/keyword'
    | '/ciphers/morse'
    | '/ciphers/pigpen'
    | '/ciphers/railfence'
    | '/ciphers/vigenere'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/achievements'
    | '/config'
    | '/ciphers/atbash'
    | '/ciphers/caesar'
    | '/ciphers/keyword'
    | '/ciphers/morse'
    | '/ciphers/pigpen'
    | '/ciphers/railfence'
    | '/ciphers/vigenere'
  id:
    | '__root__'
    | '/'
    | '/achievements'
    | '/config'
    | '/ciphers/atbash'
    | '/ciphers/caesar'
    | '/ciphers/keyword'
    | '/ciphers/morse'
    | '/ciphers/pigpen'
    | '/ciphers/railfence'
    | '/ciphers/vigenere'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AchievementsRoute: typeof AchievementsRoute
  ConfigRoute: typeof ConfigRoute
  CiphersAtbashRoute: typeof CiphersAtbashRoute
  CiphersCaesarRoute: typeof CiphersCaesarRoute
  CiphersKeywordRoute: typeof CiphersKeywordRoute
  CiphersMorseRoute: typeof CiphersMorseRoute
  CiphersPigpenRoute: typeof CiphersPigpenRoute
  CiphersRailfenceRoute: typeof CiphersRailfenceRoute
  CiphersVigenereRoute: typeof CiphersVigenereRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/config': {
      id: '/config'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof ConfigRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/achievements': {
      id: '/achievements'
      path: '/achievements'
      fullPath: '/achievements'
      preLoaderRoute: typeof AchievementsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/vigenere': {
      id: '/ciphers/vigenere'
      path: '/ciphers/vigenere'
      fullPath: '/ciphers/vigenere'
      preLoaderRoute: typeof CiphersVigenereRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/railfence': {
      id: '/ciphers/railfence'
      path: '/ciphers/railfence'
      fullPath: '/ciphers/railfence'
      preLoaderRoute: typeof CiphersRailfenceRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/pigpen': {
      id: '/ciphers/pigpen'
      path: '/ciphers/pigpen'
      fullPath: '/ciphers/pigpen'
      preLoaderRoute: typeof CiphersPigpenRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/morse': {
      id: '/ciphers/morse'
      path: '/ciphers/morse'
      fullPath: '/ciphers/morse'
      preLoaderRoute: typeof CiphersMorseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/keyword': {
      id: '/ciphers/keyword'
      path: '/ciphers/keyword'
      fullPath: '/ciphers/keyword'
      preLoaderRoute: typeof CiphersKeywordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/caesar': {
      id: '/ciphers/caesar'
      path: '/ciphers/caesar'
      fullPath: '/ciphers/caesar'
      preLoaderRoute: typeof CiphersCaesarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/atbash': {
      id: '/ciphers/atbash'
      path: '/ciphers/atbash'
      fullPath: '/ciphers/atbash'
      preLoaderRoute: typeof CiphersAtbashRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AchievementsRoute: AchievementsRoute,
  ConfigRoute: ConfigRoute,
  CiphersAtbashRoute: CiphersAtbashRoute,
  CiphersCaesarRoute: CiphersCaesarRoute,
  CiphersKeywordRoute: CiphersKeywordRoute,
  CiphersMorseRoute: CiphersMorseRoute,
  CiphersPigpenRoute: CiphersPigpenRoute,
  CiphersRailfenceRoute: CiphersRailfenceRoute,
  CiphersVigenereRoute: CiphersVigenereRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
