/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ConfigRouteImport } from './routes/config'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CiphersVigenereRouteImport } from './routes/ciphers/vigenere'
import { Route as CiphersKeywordRouteImport } from './routes/ciphers/keyword'
import { Route as CiphersCaesarRouteImport } from './routes/ciphers/caesar'

const ConfigRoute = ConfigRouteImport.update({
  id: '/config',
  path: '/config',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersVigenereRoute = CiphersVigenereRouteImport.update({
  id: '/ciphers/vigenere',
  path: '/ciphers/vigenere',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersKeywordRoute = CiphersKeywordRouteImport.update({
  id: '/ciphers/keyword',
  path: '/ciphers/keyword',
  getParentRoute: () => rootRouteImport,
} as any)
const CiphersCaesarRoute = CiphersCaesarRouteImport.update({
  id: '/ciphers/caesar',
  path: '/ciphers/caesar',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/config': typeof ConfigRoute
  '/ciphers/caesar': typeof CiphersCaesarRoute
  '/ciphers/keyword': typeof CiphersKeywordRoute
  '/ciphers/vigenere': typeof CiphersVigenereRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/config'
    | '/ciphers/caesar'
    | '/ciphers/keyword'
    | '/ciphers/vigenere'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/config'
    | '/ciphers/caesar'
    | '/ciphers/keyword'
    | '/ciphers/vigenere'
  id:
    | '__root__'
    | '/'
    | '/config'
    | '/ciphers/caesar'
    | '/ciphers/keyword'
    | '/ciphers/vigenere'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ConfigRoute: typeof ConfigRoute
  CiphersCaesarRoute: typeof CiphersCaesarRoute
  CiphersKeywordRoute: typeof CiphersKeywordRoute
  CiphersVigenereRoute: typeof CiphersVigenereRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/config': {
      id: '/config'
      path: '/config'
      fullPath: '/config'
      preLoaderRoute: typeof ConfigRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/vigenere': {
      id: '/ciphers/vigenere'
      path: '/ciphers/vigenere'
      fullPath: '/ciphers/vigenere'
      preLoaderRoute: typeof CiphersVigenereRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/keyword': {
      id: '/ciphers/keyword'
      path: '/ciphers/keyword'
      fullPath: '/ciphers/keyword'
      preLoaderRoute: typeof CiphersKeywordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/ciphers/caesar': {
      id: '/ciphers/caesar'
      path: '/ciphers/caesar'
      fullPath: '/ciphers/caesar'
      preLoaderRoute: typeof CiphersCaesarRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ConfigRoute: ConfigRoute,
  CiphersCaesarRoute: CiphersCaesarRoute,
  CiphersKeywordRoute: CiphersKeywordRoute,
  CiphersVigenereRoute: CiphersVigenereRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
