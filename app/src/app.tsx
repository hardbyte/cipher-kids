import {
  createRouter,
  RouterProvider,
} from "@tanstack/react-router";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { routeTree } from "./routeTree.gen"; // generated by @tanstack/router-plugin
import "./App.css";
import { Suspense, useMemo } from "react";
import { ThemeProvider } from "./components/theme-provider";

export interface AppContext {
  queryClient: QueryClient;
}

const queryClient = new QueryClient();

// Instantiate the router with the file-based route tree
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const typeDefinitionRouter = createRouter({
  routeTree,
  defaultPreload: "intent", // eager preloading on hover
  defaultPreloadStaleTime: 0, // for React Query scenarios
  scrollRestoration: true,
  context: {
    queryClient: queryClient,
  },
});

declare module "@tanstack/react-router" {
  interface Register {
    router: typeof typeDefinitionRouter;
  }
}

function InnerRouter({ queryClient }: { queryClient: QueryClient }) {
  const router = useMemo(
    () =>
      createRouter({
        routeTree,
        defaultPreload: "intent",
        defaultPreloadStaleTime: 0,
        scrollRestoration: true,
        context: { queryClient },
      }),
    [queryClient],
  );
  return <RouterProvider router={router} context={{ queryClient }} />;
}

export default function App() {
  return (
    <ThemeProvider>
      <Suspense fallback={<div>Loading authâ€¦</div>}>
        <QueryClientProvider client={queryClient}>
          <InnerRouter queryClient={queryClient} />
        </QueryClientProvider>
      </Suspense>
    </ThemeProvider>
  );
}
